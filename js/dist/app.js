(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jQuery"));
	else if(typeof define === 'function' && define.amd)
		define(["jQuery"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("jQuery")) : factory(root["jQuery"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/**
	 * 
	 * @date 2016-01-29 15:38:50
	 * @author vfasky <vfasky@gmail.com>
	 * @link http://vfasky.com
	 */
	'use strict';
	var $, App, Template, app, ref;

	ref = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mcoreApp\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())), App = ref.App, Template = ref.Template;

	$ = __webpack_require__(1);

	Template.formatters.itemLen = function(todos) {
	  var len;
	  len = 0;
	  $.each(todos, function(k, v) {
	    if (v.visibility !== 'completed') {
	      return len++;
	    }
	  });
	  if (len < 2) {
	    return len + " item";
	  }
	  return len + " items";
	};

	Template.formatters.completedLen = function(todos) {
	  var len;
	  len = 0;
	  $.each(todos, function(k, v) {
	    if (v.visibility === 'completed') {
	      return len++;
	    }
	  });
	  return len;
	};

	app = new App($('body'));

	app.route('/:selected', __webpack_require__(2)).route('*', __webpack_require__(2));

	app.run();


/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/**
	 * todo MVC
	 * @date 2016-01-29 15:44:12
	 * @author vfasky <vfasky@gmail.com>
	 * @link http://vfasky.com
	 */
	'use strict';
	var $, Index, View, model, ref, util,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mcoreApp\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())), View = ref.View, util = ref.util;

	model = __webpack_require__(3);

	$ = __webpack_require__(1);

	Index = (function(superClass) {
	  extend(Index, superClass);

	  function Index() {
	    return Index.__super__.constructor.apply(this, arguments);
	  }

	  Index.prototype.run = function(selected) {
	    this.selected = selected != null ? selected : 'all';
	    return this.render(__webpack_require__(4), {
	      todos: model.list(this.selected),
	      selected: this.selected,
	      allTodos: model.list()
	    });
	  };

	  Index.prototype.updateTodos = function() {
	    this.set('todos', model.list(this.selected));
	    return this.set('allTodos', model.list());
	  };

	  Index.prototype.editTodo = function(event, el, todo) {
	    todo.isEdit = true;
	    model.update(todo);
	    this.updateTodos();
	    return util.nextTick(function() {
	      return $(el).next().focus();
	    });
	  };

	  Index.prototype.saveTodo = function(event, el, todo) {
	    if (false === todo.isEdit) {
	      return false;
	    }
	    if (el.value) {
	      todo.title = el.value;
	    }
	    todo.isEdit = false;
	    model.update(todo);
	    return this.updateTodos();
	  };

	  Index.prototype.unsaveTodo = function(event, el, todo) {
	    var oldTodo;
	    todo.isEdit = false;
	    oldTodo = model.get(todo.id);
	    el.value = oldTodo.title;
	    model.update(todo);
	    this.updateTodos();
	    return false;
	  };

	  Index.prototype.removeTodo = function(event, el, id) {
	    model.remove(id);
	    this.updateTodos();
	    return false;
	  };

	  Index.prototype.removeCompleted = function() {
	    var data, todos;
	    data = [];
	    todos = model.list();
	    $.each(todos, function(k, v) {
	      if (v.visibility === 'active') {
	        return data.push(v);
	      }
	    });
	    model.write(data);
	    this.updateTodos();
	    return false;
	  };

	  Index.prototype.addTodo = function(event, el) {
	    var todo;
	    todo = {
	      title: $.trim(el.value),
	      visibility: 'active'
	    };
	    if (todo.title.length === 0) {
	      return;
	    }
	    model.add(todo);
	    this.updateTodos();
	    el.value = '';
	    return false;
	  };

	  Index.prototype.changeAllVisibility = function(event, el) {
	    var isCompleted, todos;
	    isCompleted = el.checked;
	    todos = model.list(this.selected);
	    $.each(todos, function(k, v) {
	      return v.visibility = isCompleted && 'completed' || 'active';
	    });
	    model.write(todos);
	    return this.updateTodos();
	  };

	  Index.prototype.changeTodoVisibility = function(event, el, todo) {
	    todo.visibility = el.checked && 'completed' || 'active';
	    model.update(todo);
	    return this.updateTodos();
	  };

	  return Index;

	})(View);

	module.exports = Index;

	module.exports.viewName = 'index';


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0

	/**
	 * 
	 * @date 2016-01-30 10:15:30
	 * @author vfasky <vfasky@gmail.com>
	 * @link http://vfasky.com
	 */
	'use strict';
	var $, _data, _storage_key, storage;

	$ = __webpack_require__(1);

	_storage_key = '__todo_mvc_data_';

	storage = window.localStorage;

	if (!storage || !storage.setItem) {
	  _data = {};
	  storage = {
	    setItem: function(key, val) {
	      return _data[key] = val;
	    },
	    getItem: function(key) {
	      return _data[key];
	    }
	  };
	}

	exports.list = function(selected) {
	  var data, error, error1;
	  if (selected == null) {
	    selected = 'all';
	  }
	  data = [];
	  try {
	    data = JSON.parse(storage.getItem(_storage_key) || '[]');
	  } catch (error1) {
	    error = error1;
	  }
	  if (selected === 'all') {
	    return data;
	  }
	  return $.grep(data, function(v) {
	    return v.visibility === selected;
	  });
	};

	exports.write = function(data) {
	  return storage.setItem(_storage_key, JSON.stringify(data));
	};

	exports.update = function(todo) {
	  var data, isMatch;
	  data = exports.list();
	  isMatch = false;
	  $.each(data, function(k, v) {
	    if (String(v.id) === String(todo.id)) {
	      v.title = todo.title;
	      v.visibility = todo.visibility;
	      v.isEdit = todo.isEdit;
	      isMatch = true;
	      return false;
	    }
	  });
	  if (isMatch) {
	    return exports.write(data);
	  }
	};

	exports.add = function(todo) {
	  var data;
	  todo.id = (new Date).getTime();
	  data = exports.list();
	  data.push(todo);
	  exports.write(data);
	  return todo.id;
	};

	exports.get = function(id) {
	  var data, todo;
	  data = exports.list();
	  todo = null;
	  $.each(data, function(k, v) {
	    if (String(v.id) === String(id)) {
	      todo = v;
	      return false;
	    }
	  });
	  return todo;
	};

	exports.remove = function(id) {
	  var data;
	  data = exports.list();
	  return $.each(data, function(k, v) {
	    if (String(v.id) === String(id)) {
	      data.splice(k, 1);
	      exports.write(data);
	      return false;
	    }
	  });
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var mcore = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mcore\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var __mc_T_El = mcore.virtualDom.Element;
	var __mc_T_formatters = mcore.Template.formatters;
	var __mc_T_binders = mcore.Template.binders;
	var __mc_T_components = mcore.Template.components;
	var __objectKeys = mcore.util.objectKeys;
	var __each = mcore.util.each;
	var __isArray = mcore.util.isArray;

	module.exports = function(scope, __mc__observe) {
	    var __mc__children_0 = [];
	    var __mc__binders = {};
	    var __mc__dom_id = 0;
	    var __pathMap = {};

	    var __getPath = function(path) {
	        var key = path;
	        if (__pathMap[path] >= 0) {
	            path = path + ':' + String(__pathMap[path]);
	            //console.log(path, String(__pathMap[key]));
	            __pathMap[key]++;
	            //console.log(path, __pathMap[key]);
	        } else {
	            __pathMap[path] = 0;
	        }
	        return path;
	    };

	    var __parserBinders = function(__mc__binderData, __mc__isBindObserve, key, val) {
	        if (__mc_T_binders.hasOwnProperty(key)) {
	            __mc__isBindObserve = true;
	            __mc__binderData.push({
	                attrName: key,
	                value: val
	            });
	        }
	        return __mc__isBindObserve;
	    };

	    var __bindBinder = function(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData) {
	        if (!__mc__isBindObserve) {
	            var __mc__attr__keys = __objectKeys(__mc__attr);
	            __each(__mc__attr__keys, function(attr) {
	                if (attr.indexOf('on-') === 0) {
	                    __mc__isBindObserve = true;
	                }
	            });
	        }
	        if (__mc__isBindObserve || __mc_T_components[__mc__new_el.tagName]) {
	            __mc__new_el.bindTemplate(__mc__observe);
	        }

	        if (__mc__isBindObserve) {
	            for (var __mc_i = 0, __mc_len = __mc__binderData.length; __mc_i < __mc_len; __mc_i++) {
	                var __mc_v = __mc__binderData[__mc_i];
	                __mc__new_el.bindBinder(__mc_v.attrName, __mc_v.value);
	            }
	        }
	    };

	    (function(scope, tree) { // startTree 0

	        // <section class="todoapp" />
	        var __mc__children_0 = [],
	            __mc__attr = {},
	            __mc__isBindObserve = false,
	            __mc__binderData = [];
	        __mc__attr['class'] = 'todoapp';
	        __mc__attr['key'] = __getPath('.0');
	        (function(scope, tree) { // startTree 1

	            // <header class="header" />
	            var __mc__children_1 = [],
	                __mc__attr = {},
	                __mc__isBindObserve = false,
	                __mc__binderData = [];
	            __mc__attr['class'] = 'header';
	            __mc__attr['key'] = __getPath('.0.1');
	            (function(scope, tree) { // startTree 2

	                // <h1/>
	                var __mc__children_2 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['key'] = __getPath('.0.1.1');
	                (function(scope, tree) { // startTree 3

	                    tree.push('todos');
	                })(scope, __mc__children_2); // endTree 3
	                var __mc__new_el = new __mc_T_El('h1', __mc__attr, __mc__children_2);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	                // <input class="new-todo"  mc-on-keyenter="addTodo"  autofocus=""  autocomplete="off"  placeholder="What needs to be done?" />
	                var __mc__children_4 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['class'] = 'new-todo';
	                __mc__attr['on-keyenter'] = 'addTodo';
	                __mc__attr['autofocus'] = '';
	                __mc__attr['autocomplete'] = 'off';
	                __mc__attr['placeholder'] = 'What needs to be done?';
	                __mc__attr['key'] = __getPath('.0.1.3');
	                var __mc__new_el = new __mc_T_El('input', __mc__attr, __mc__children_4);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	            })(scope, __mc__children_1); // endTree 2
	            var __mc__new_el = new __mc_T_El('header', __mc__attr, __mc__children_1);
	            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	            tree.push(__mc__new_el);
	            // <section class="main" />
	            var __mc__children_5 = [],
	                __mc__attr = {},
	                __mc__isBindObserve = false,
	                __mc__binderData = [];
	            __mc__attr['class'] = 'main';
	            __mc__attr['key'] = __getPath('.0.3');
	            (function(scope, tree) { // startTree 6

	                // <input class="toggle-all"  mc-on-change="changeAllVisibility"  type="checkbox"  mc-show="scope.todos.length > 0" />
	                var __mc__children_6 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['class'] = 'toggle-all';
	                __mc__attr['on-change'] = 'changeAllVisibility';
	                __mc__attr['type'] = 'checkbox';
	                __mc__attr['show'] = scope.todos.length > 0;
	                if (__mc__attr['show'] == undefined) {
	                    __mc__attr['show'] = '';
	                }
	                __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'show', __mc__attr['show']);
	                __mc__attr['key'] = __getPath('.0.3.1');
	                var __mc__new_el = new __mc_T_El('input', __mc__attr, __mc__children_6);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	                // <ul class="todo-list" />
	                var __mc__children_7 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['class'] = 'todo-list';
	                __mc__attr['key'] = __getPath('.0.3.3');
	                (function(scope, tree) { // startTree 8


	                    // for todo in scope.todos
	                    var __mc__arr = __isArray(scope.todos) ? scope.todos : [];
	                    for (var __mc__$ix_ = 0, len = __mc__arr.length; __mc__$ix_ < len; __mc__$ix_++) {
	                        var todo = __mc__arr[__mc__$ix_];
	                        // <li mc-class="'todo'  + (todo.visibility == 'completed' ? ' completed' : '') + (todo.isEdit ? ' editing' : '')" />
	                        var __mc__children_9 = [],
	                            __mc__attr = {},
	                            __mc__isBindObserve = false,
	                            __mc__binderData = [];
	                        __mc__attr['class'] = 'todo' + (todo.visibility == 'completed' ? ' completed' : '') + (todo.isEdit ? ' editing' : '');
	                        if (__mc__attr['class'] == undefined) {
	                            __mc__attr['class'] = '';
	                        }
	                        __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'class', __mc__attr['class']);
	                        __mc__attr['key'] = __getPath('.0.3.3.1');
	                        (function(scope, tree) { // startTree 10

	                            // <div class="view"  mc-on-dblclick="editTodo(todo)" />
	                            var __mc__children_10 = [],
	                                __mc__attr = {},
	                                __mc__isBindObserve = false,
	                                __mc__binderData = [];
	                            __mc__attr['class'] = 'view';
	                            __mc__attr['on-dblclick'] = ['editTodo', todo];
	                            __mc__attr['key'] = __getPath('.0.3.3.1.1');
	                            (function(scope, tree) { // startTree 11

	                                // <input class="toggle"  mc-on-change="changeTodoVisibility(todo)"  type="checkbox"  mc-checked="todo.visibility == 'completed'" />
	                                var __mc__children_11 = [],
	                                    __mc__attr = {},
	                                    __mc__isBindObserve = false,
	                                    __mc__binderData = [];
	                                __mc__attr['class'] = 'toggle';
	                                __mc__attr['on-change'] = ['changeTodoVisibility', todo];
	                                __mc__attr['type'] = 'checkbox';
	                                __mc__attr['checked'] = todo.visibility == 'completed';
	                                if (__mc__attr['checked'] == undefined) {
	                                    __mc__attr['checked'] = '';
	                                }
	                                __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'checked', __mc__attr['checked']);
	                                __mc__attr['key'] = __getPath('.0.3.3.1.1.1');
	                                var __mc__new_el = new __mc_T_El('input', __mc__attr, __mc__children_11);
	                                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                                tree.push(__mc__new_el);
	                                // <label/>
	                                var __mc__children_12 = [],
	                                    __mc__attr = {},
	                                    __mc__isBindObserve = false,
	                                    __mc__binderData = [];
	                                __mc__attr['key'] = __getPath('.0.3.3.1.1.3');
	                                (function(scope, tree) { // startTree 13

	                                    var __mc__rp__key_0;
	                                    __mc__rp__key_0 = todo.title;
	                                    if (__mc__rp__key_0 == undefined) {
	                                        __mc__rp__key_0 = '';
	                                    }
	                                    tree.push("" + __mc__rp__key_0 + "");
	                                })(scope, __mc__children_12); // endTree 13
	                                var __mc__new_el = new __mc_T_El('label', __mc__attr, __mc__children_12);
	                                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                                tree.push(__mc__new_el);
	                                // <button class="destroy"  mc-on-click="removeTodo(todo.id)" />
	                                var __mc__children_14 = [],
	                                    __mc__attr = {},
	                                    __mc__isBindObserve = false,
	                                    __mc__binderData = [];
	                                __mc__attr['class'] = 'destroy';
	                                __mc__attr['on-click'] = ['removeTodo', todo.id];
	                                __mc__attr['key'] = __getPath('.0.3.3.1.1.5');
	                                var __mc__new_el = new __mc_T_El('button', __mc__attr, __mc__children_14);
	                                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                                tree.push(__mc__new_el);
	                            })(scope, __mc__children_10); // endTree 11
	                            var __mc__new_el = new __mc_T_El('div', __mc__attr, __mc__children_10);
	                            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                            tree.push(__mc__new_el);
	                            // <input class="edit"  type="text"  mc-on-blur="saveTodo(todo)"  mc-on-keyenter="saveTodo(todo)"  mc-on-keyesc="unsaveTodo(todo)"  mc-value="todo.title" />
	                            var __mc__children_15 = [],
	                                __mc__attr = {},
	                                __mc__isBindObserve = false,
	                                __mc__binderData = [];
	                            __mc__attr['class'] = 'edit';
	                            __mc__attr['type'] = 'text';
	                            __mc__attr['on-blur'] = ['saveTodo', todo];
	                            __mc__attr['on-keyenter'] = ['saveTodo', todo];
	                            __mc__attr['on-keyesc'] = ['unsaveTodo', todo];
	                            __mc__attr['value'] = todo.title;
	                            if (__mc__attr['value'] == undefined) {
	                                __mc__attr['value'] = '';
	                            }
	                            __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'value', __mc__attr['value']);
	                            __mc__attr['key'] = __getPath('.0.3.3.1.3');
	                            var __mc__new_el = new __mc_T_El('input', __mc__attr, __mc__children_15);
	                            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                            tree.push(__mc__new_el);
	                        })(scope, __mc__children_9); // endTree 10
	                        var __mc__new_el = new __mc_T_El('li', __mc__attr, __mc__children_9);
	                        __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                        tree.push(__mc__new_el);
	                    } // endFor 
	                })(scope, __mc__children_7); // endTree 8
	                var __mc__new_el = new __mc_T_El('ul', __mc__attr, __mc__children_7);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	            })(scope, __mc__children_5); // endTree 6
	            var __mc__new_el = new __mc_T_El('section', __mc__attr, __mc__children_5);
	            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	            tree.push(__mc__new_el);
	            // <footer class="footer"  mc-show="scope.allTodos.length > 0" />
	            var __mc__children_16 = [],
	                __mc__attr = {},
	                __mc__isBindObserve = false,
	                __mc__binderData = [];
	            __mc__attr['class'] = 'footer';
	            __mc__attr['show'] = scope.allTodos.length > 0;
	            if (__mc__attr['show'] == undefined) {
	                __mc__attr['show'] = '';
	            }
	            __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'show', __mc__attr['show']);
	            __mc__attr['key'] = __getPath('.0.5');
	            (function(scope, tree) { // startTree 17

	                // <span class="todo-count" />
	                var __mc__children_17 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['class'] = 'todo-count';
	                __mc__attr['key'] = __getPath('.0.5.1');
	                (function(scope, tree) { // startTree 18

	                    // <strong/>
	                    var __mc__children_18 = [],
	                        __mc__attr = {},
	                        __mc__isBindObserve = false,
	                        __mc__binderData = [];
	                    __mc__attr['key'] = __getPath('.0.5.1.1');
	                    (function(scope, tree) { // startTree 19

	                        var __mc__rp__key_0;
	                        __mc__rp__key_0 = (function(x) {
	                            // itemLen
	                            if (__mc_T_formatters.hasOwnProperty('itemLen')) {
	                                x = __mc_T_formatters['itemLen'](x);
	                            } // end itemLen 
	                            return x;
	                        })(scope.allTodos);
	                        tree.push("" + __mc__rp__key_0 + "");
	                    })(scope, __mc__children_18); // endTree 19
	                    var __mc__new_el = new __mc_T_El('strong', __mc__attr, __mc__children_18);
	                    __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                    tree.push(__mc__new_el);
	                    tree.push(' left  		');
	                })(scope, __mc__children_17); // endTree 18
	                var __mc__new_el = new __mc_T_El('span', __mc__attr, __mc__children_17);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	                // <ul class="filters" />
	                var __mc__children_21 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['class'] = 'filters';
	                __mc__attr['key'] = __getPath('.0.5.3');
	                (function(scope, tree) { // startTree 22

	                    // <li/>
	                    var __mc__children_22 = [],
	                        __mc__attr = {},
	                        __mc__isBindObserve = false,
	                        __mc__binderData = [];
	                    __mc__attr['key'] = __getPath('.0.5.3.1');
	                    (function(scope, tree) { // startTree 23

	                        // <a href="#/all"  mc-class=" scope.selected == 'all' ? 'selected' : '' " />
	                        var __mc__children_23 = [],
	                            __mc__attr = {},
	                            __mc__isBindObserve = false,
	                            __mc__binderData = [];
	                        __mc__attr['href'] = '#/all';
	                        __mc__attr['class'] = scope.selected == 'all' ? 'selected' : '';
	                        if (__mc__attr['class'] == undefined) {
	                            __mc__attr['class'] = '';
	                        }
	                        __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'class', __mc__attr['class']);
	                        __mc__attr['key'] = __getPath('.0.5.3.1.0');
	                        (function(scope, tree) { // startTree 24

	                            tree.push('All');
	                        })(scope, __mc__children_23); // endTree 24
	                        var __mc__new_el = new __mc_T_El('a', __mc__attr, __mc__children_23);
	                        __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                        tree.push(__mc__new_el);
	                    })(scope, __mc__children_22); // endTree 23
	                    var __mc__new_el = new __mc_T_El('li', __mc__attr, __mc__children_22);
	                    __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                    tree.push(__mc__new_el);
	                    // <li/>
	                    var __mc__children_25 = [],
	                        __mc__attr = {},
	                        __mc__isBindObserve = false,
	                        __mc__binderData = [];
	                    __mc__attr['key'] = __getPath('.0.5.3.3');
	                    (function(scope, tree) { // startTree 26

	                        // <a href="#/active"  mc-class=" scope.selected == 'active' ? 'selected' : '' " />
	                        var __mc__children_26 = [],
	                            __mc__attr = {},
	                            __mc__isBindObserve = false,
	                            __mc__binderData = [];
	                        __mc__attr['href'] = '#/active';
	                        __mc__attr['class'] = scope.selected == 'active' ? 'selected' : '';
	                        if (__mc__attr['class'] == undefined) {
	                            __mc__attr['class'] = '';
	                        }
	                        __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'class', __mc__attr['class']);
	                        __mc__attr['key'] = __getPath('.0.5.3.3.0');
	                        (function(scope, tree) { // startTree 27

	                            tree.push('Active');
	                        })(scope, __mc__children_26); // endTree 27
	                        var __mc__new_el = new __mc_T_El('a', __mc__attr, __mc__children_26);
	                        __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                        tree.push(__mc__new_el);
	                    })(scope, __mc__children_25); // endTree 26
	                    var __mc__new_el = new __mc_T_El('li', __mc__attr, __mc__children_25);
	                    __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                    tree.push(__mc__new_el);
	                    // <li/>
	                    var __mc__children_28 = [],
	                        __mc__attr = {},
	                        __mc__isBindObserve = false,
	                        __mc__binderData = [];
	                    __mc__attr['key'] = __getPath('.0.5.3.5');
	                    (function(scope, tree) { // startTree 29

	                        // <a href="#/completed"  mc-class=" scope.selected == 'completed' ? 'selected' : '' " />
	                        var __mc__children_29 = [],
	                            __mc__attr = {},
	                            __mc__isBindObserve = false,
	                            __mc__binderData = [];
	                        __mc__attr['href'] = '#/completed';
	                        __mc__attr['class'] = scope.selected == 'completed' ? 'selected' : '';
	                        if (__mc__attr['class'] == undefined) {
	                            __mc__attr['class'] = '';
	                        }
	                        __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'class', __mc__attr['class']);
	                        __mc__attr['key'] = __getPath('.0.5.3.5.0');
	                        (function(scope, tree) { // startTree 30

	                            tree.push('Completed');
	                        })(scope, __mc__children_29); // endTree 30
	                        var __mc__new_el = new __mc_T_El('a', __mc__attr, __mc__children_29);
	                        __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                        tree.push(__mc__new_el);
	                    })(scope, __mc__children_28); // endTree 29
	                    var __mc__new_el = new __mc_T_El('li', __mc__attr, __mc__children_28);
	                    __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                    tree.push(__mc__new_el);
	                })(scope, __mc__children_21); // endTree 22
	                var __mc__new_el = new __mc_T_El('ul', __mc__attr, __mc__children_21);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	                // <button class="clear-completed"  mc-on-click="removeCompleted"  mc-show="scope.allTodos | completedLen" />
	                var __mc__children_31 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['class'] = 'clear-completed';
	                __mc__attr['on-click'] = 'removeCompleted';
	                __mc__attr['show'] = (function(x) {
	                    // completedLen
	                    if (__mc_T_formatters.hasOwnProperty('completedLen')) {
	                        x = __mc_T_formatters['completedLen'](x);
	                    } // end completedLen 
	                    return x;
	                })(scope.allTodos);
	                __mc__isBindObserve = __parserBinders(__mc__binderData, __mc__isBindObserve, 'show', __mc__attr['show']);
	                __mc__attr['key'] = __getPath('.0.5.5');
	                (function(scope, tree) { // startTree 32

	                    tree.push('             Clear completed         ');
	                })(scope, __mc__children_31); // endTree 32
	                var __mc__new_el = new __mc_T_El('button', __mc__attr, __mc__children_31);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	            })(scope, __mc__children_16); // endTree 17
	            var __mc__new_el = new __mc_T_El('footer', __mc__attr, __mc__children_16);
	            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	            tree.push(__mc__new_el);
	        })(scope, __mc__children_0); // endTree 1
	        var __mc__new_el = new __mc_T_El('section', __mc__attr, __mc__children_0);
	        __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	        tree.push(__mc__new_el);
	        // <footer class="info" />
	        var __mc__children_33 = [],
	            __mc__attr = {},
	            __mc__isBindObserve = false,
	            __mc__binderData = [];
	        __mc__attr['class'] = 'info';
	        __mc__attr['key'] = __getPath('.2');
	        (function(scope, tree) { // startTree 34

	            // <p/>
	            var __mc__children_34 = [],
	                __mc__attr = {},
	                __mc__isBindObserve = false,
	                __mc__binderData = [];
	            __mc__attr['key'] = __getPath('.2.1');
	            (function(scope, tree) { // startTree 35

	                tree.push('Double-click to edit a todo');
	            })(scope, __mc__children_34); // endTree 35
	            var __mc__new_el = new __mc_T_El('p', __mc__attr, __mc__children_34);
	            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	            tree.push(__mc__new_el);
	            // <p/>
	            var __mc__children_36 = [],
	                __mc__attr = {},
	                __mc__isBindObserve = false,
	                __mc__binderData = [];
	            __mc__attr['key'] = __getPath('.2.3');
	            (function(scope, tree) { // startTree 37

	                tree.push('Written by ');
	                // <a href="http://vfasky.com" />
	                var __mc__children_38 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['href'] = 'http://vfasky.com';
	                __mc__attr['key'] = __getPath('.2.3.1');
	                (function(scope, tree) { // startTree 39

	                    tree.push('vfasky');
	                })(scope, __mc__children_38); // endTree 39
	                var __mc__new_el = new __mc_T_El('a', __mc__attr, __mc__children_38);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	            })(scope, __mc__children_36); // endTree 37
	            var __mc__new_el = new __mc_T_El('p', __mc__attr, __mc__children_36);
	            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	            tree.push(__mc__new_el);
	            // <p/>
	            var __mc__children_40 = [],
	                __mc__attr = {},
	                __mc__isBindObserve = false,
	                __mc__binderData = [];
	            __mc__attr['key'] = __getPath('.2.5');
	            (function(scope, tree) { // startTree 41

	                tree.push('Part of ');
	                // <a href="http://todomvc.com" />
	                var __mc__children_42 = [],
	                    __mc__attr = {},
	                    __mc__isBindObserve = false,
	                    __mc__binderData = [];
	                __mc__attr['href'] = 'http://todomvc.com';
	                __mc__attr['key'] = __getPath('.2.5.1');
	                (function(scope, tree) { // startTree 43

	                    tree.push('TodoMVC');
	                })(scope, __mc__children_42); // endTree 43
	                var __mc__new_el = new __mc_T_El('a', __mc__attr, __mc__children_42);
	                __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	                tree.push(__mc__new_el);
	            })(scope, __mc__children_40); // endTree 41
	            var __mc__new_el = new __mc_T_El('p', __mc__attr, __mc__children_40);
	            __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	            tree.push(__mc__new_el);
	        })(scope, __mc__children_33); // endTree 34
	        var __mc__new_el = new __mc_T_El('footer', __mc__attr, __mc__children_33);
	        __bindBinder(__mc__new_el, __mc__attr, __mc__isBindObserve, __mc__binderData);
	        tree.push(__mc__new_el);
	    })(scope, __mc__children_0); // endTree 0


	    if (__mc__children_0.length === 1 && __mc__children_0[0].render) {
	        var virtualDom = __mc__children_0[0];
	    } else {
	        var virtualDom = new __mc_T_El('mc-vd', {}, __mc__children_0);
	    }

	    var templateDefined = {
	        'virtualDom': virtualDom
	    };
	    return templateDefined;
	};

/***/ }
/******/ ])
});
;